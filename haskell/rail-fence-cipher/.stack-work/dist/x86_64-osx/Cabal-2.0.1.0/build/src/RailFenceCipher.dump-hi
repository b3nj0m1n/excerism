
==================== FINAL INTERFACE ====================
2018-01-18 22:11:50.337027 UTC

interface rail-fence-cipher-1.0.1.2-HlyxhdlAAKQ9RYMVutvs8m:RailFenceCipher 8022
  interface hash: f3536c7d2df7aa01b3e15c4b85e1cdc9
  ABI hash: 74a7b6841abcba93e1ad69de4613f06d
  export-list hash: d4ad91190c384e8e4b7ce1bec2cb2d83
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0451a77cc0d8e5d99d548d6441c7dd35
  sig of: Nothing
  used TH splices: False
  where
exports:
  RailFenceCipher.decode
  RailFenceCipher.encode
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.List 4ab7fa2a1b87502b23af891a384f0506
import  -/  base-4.10.1.0:Data.OldList 555420b092ca8cf0a8f9666bc0e07dcf
import  -/  base-4.10.1.0:Data.Ord a6789a2a9217f3ca764324b27739797e
import  -/  base-4.10.1.0:Data.Tuple 8fa1305aa5032ea35e2a54fa5f1e78f9
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
ab880a6656aaf8fa4eda61a7c9e033c6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   RailFenceCipher.$trModule3
                   RailFenceCipher.$trModule1) -}
80e79205479df51fe5f4a2b255bfd9c8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS RailFenceCipher.$trModule2) -}
7aa5528419690b8e7250ba99668d40b3
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RailFenceCipher"#) -}
e1b3c4ad55e746ef690b67dafa2e8881
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS RailFenceCipher.$trModule4) -}
8730085d3b9af25ad6cfb16102d5f8ce
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("rail-fence-cipher-1.0.1.2-HlyxhdlAAKQ9RYMVutvs8m"#) -}
7f16e0580dbe7d84f715562adf1daa2d
  $wgo ::
    GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> GHC.Prim.Int#
    -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><L,1*U>,
     Inline: [0] -}
acfb2aca36dcc0a5a2b1e2aad84e7f11
  $wrows :: GHC.Prim.Int# -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   n :: [GHC.Types.Int]
                   = GHC.List.reverse1
                       @ GHC.Types.Int
                       (GHC.Enum.eftInt 2# (GHC.Prim.-# ww 1#))
                       (GHC.Types.[] @ GHC.Types.Int)
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># 1# ww) of wild {
                   GHC.Types.False
                   -> letrec {
                        go :: GHC.Prim.Int# -> [GHC.Types.Int]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Prim.Int#) ->
                          GHC.Types.:
                            @ GHC.Types.Int
                            (GHC.Types.I# x)
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x ww) of wild1 {
                               GHC.Types.False -> go (GHC.Prim.+# x 1#) GHC.Types.True -> n })
                      } in
                      go 1#
                   GHC.Types.True -> n }) -}
3d53af1861430f26f36dc0c5749cb0a1
  decode :: GHC.Types.Int -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: (\ (size :: GHC.Types.Int)
                   (encoded :: GHC.Base.String) ->
                 GHC.Base.map
                   @ (GHC.Types.Char, GHC.Types.Int)
                   @ GHC.Types.Char
                   (Data.Tuple.fst @ GHC.Types.Char @ GHC.Types.Int)
                   (Data.OldList.sortBy
                      @ (GHC.Types.Char, GHC.Types.Int)
                      RailFenceCipher.decode4
                      (GHC.List.zip
                         @ GHC.Types.Char
                         @ GHC.Types.Int
                         encoded
                         (case GHC.List.$wlenAcc
                                 @ GHC.Types.Char
                                 encoded
                                 0# of ww2 { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# 0# ww2) of wild {
                            GHC.Types.False -> RailFenceCipher.decode2
                            GHC.Types.True
                            -> case size of ww { GHC.Types.I# ww1 ->
                               case RailFenceCipher.$wrows ww1 of wild1 {
                                 [] -> case GHC.List.cycle1 ret_ty [GHC.Types.Int] of {}
                                 : ipv ipv1
                                 -> letrec {
                                      xs' :: [GHC.Types.Int] = GHC.Base.++ @ GHC.Types.Int wild1 xs'
                                    } in
                                    GHC.Base.map
                                      @ (GHC.Types.Int, GHC.Types.Int)
                                      @ GHC.Types.Int
                                      (Data.Tuple.fst @ GHC.Types.Int @ GHC.Types.Int)
                                      (Data.OldList.sortBy
                                         @ (GHC.Types.Int, GHC.Types.Int)
                                         RailFenceCipher.decode1
                                         (RailFenceCipher.$wgo 1# xs' ww2)) } } } })))) -}
4775cac5cfab4c2096615df993649c2a
  decode1 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(S)),1*U(A,1*U(U))><S(LS(S)),1*U(A,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: (GHC.Types.Int, GHC.Types.Int))
                   (y :: (GHC.Types.Int, GHC.Types.Int))[OneShot] ->
                 case x of wild { (,) ds1 y1 ->
                 case y1 of wild1 { GHC.Types.I# x# ->
                 case y of wild2 { (,) ds2 y2 ->
                 case y2 of wild3 { GHC.Types.I# y# ->
                 GHC.Classes.compareInt# x# y# } } } }) -}
630015b32be39aeee98494dc9840caed
  decode2 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Base.map
                   @ (GHC.Types.Int, GHC.Types.Int)
                   @ GHC.Types.Int
                   (Data.Tuple.fst @ GHC.Types.Int @ GHC.Types.Int)
                   RailFenceCipher.decode3) -}
9cfa31f5730deedcba57de0ca66dae1b
  decode3 :: [(GHC.Types.Int, GHC.Types.Int)]
  {- Unfolding: (Data.OldList.sortBy
                   @ (GHC.Types.Int, GHC.Types.Int)
                   RailFenceCipher.decode1
                   (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))) -}
1d977df8f9f54553aa639e374c4bcd55
  decode4 ::
    (GHC.Types.Char, GHC.Types.Int)
    -> (GHC.Types.Char, GHC.Types.Int) -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(S)),1*U(A,1*U(U))><S(LS(S)),1*U(A,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: (GHC.Types.Char, GHC.Types.Int))
                   (y :: (GHC.Types.Char, GHC.Types.Int))[OneShot] ->
                 case x of wild { (,) ds1 y1 ->
                 case y1 of wild1 { GHC.Types.I# x# ->
                 case y of wild2 { (,) ds2 y2 ->
                 case y2 of wild3 { GHC.Types.I# y# ->
                 GHC.Classes.compareInt# x# y# } } } }) -}
472f70a4a62a530cfba5bee581ccd84b
  encode :: GHC.Types.Int -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (size :: GHC.Types.Int)
                   (decoded :: GHC.Base.String) ->
                 GHC.Base.map
                   @ (GHC.Types.Char, GHC.Types.Int)
                   @ GHC.Types.Char
                   (Data.Tuple.fst @ GHC.Types.Char @ GHC.Types.Int)
                   (Data.OldList.sortBy
                      @ (GHC.Types.Char, GHC.Types.Int)
                      RailFenceCipher.decode4
                      (GHC.List.zip
                         @ GHC.Types.Char
                         @ GHC.Types.Int
                         decoded
                         (case size of ww { GHC.Types.I# ww1 ->
                          case RailFenceCipher.$wrows ww1 of wild {
                            [] -> GHC.List.cycle1 @ GHC.Types.Int
                            : ipv ipv1
                            -> letrec {
                                 xs' :: [GHC.Types.Int] = GHC.Base.++ @ GHC.Types.Int wild xs'
                               } in
                               xs' } })))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

