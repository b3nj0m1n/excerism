
==================== FINAL INTERFACE ====================
2018-01-18 05:10:21.329096 UTC

interface main:Main 8022
  interface hash: d10359ba4dee936ea575cc52d5326f76
  ABI hash: 0118656fb8b7811b1ab0fe00473ea5f7
  export-list hash: 033acc4b2b90388f442a616207a5b29c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ceba4ce9de875b2bad78653ef2c6ae33
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.6.0.0 QuickCheck-2.10.1
                      ansi-terminal-0.7.1.1 array-0.5.2.0 async-2.1.1.1 base-4.10.1.0
                      call-stack-0.1.0 colour-2.3.4 containers-0.5.10.2 deepseq-1.4.3.0
                      directory-1.3.0.2 filepath-1.4.1.2 ghc-boot-th-8.2.2
                      ghc-prim-0.5.1.1 hspec-2.4.4 hspec-core-2.4.4
                      hspec-expectations-0.8.2 integer-gmp-1.0.1.0 pretty-1.1.3.3
                      primitive-0.6.2.0 quickcheck-io-0.2.0 rail-fence-cipher-1.0.1.2
                      random-1.1 setenv-0.1.1.3 stm-2.4.4.1 template-haskell-2.12.0.0
                      tf-random-0.5 time-1.8.0.2 transformers-0.5.2.0 unix-2.7.2.2
orphans: colour-2.3.4:Data.Colour
         quickcheck-io-0.2.0:Test.QuickCheck.IO
         transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.4.1:Control.Monad.STM base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         hspec-core-2.4.4:Test.Hspec.Core.Example
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0:Control.Monad.Primitive
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  hspec-2.4.4:Test.Hspec 917f73e7880f4d00e7f96bf294ccc197
import  -/  hspec-2.4.4:Test.Hspec.Runner 76ee7a45c2f90c0efa69a5b4a82c0d59
import  -/  hspec-core-2.4.4:Test.Hspec.Core.Options bb781f7ab113f22dac5250ef654e6b99
import  -/  hspec-core-2.4.4:Test.Hspec.Core.Runner dcbaaf75cc4a7da1f1e0ae3788372a84
import  -/  hspec-core-2.4.4:Test.Hspec.Core.Spec 4371b0f2302c6aee07c9624d075941a2
import  -/  hspec-core-2.4.4:Test.Hspec.Core.Spec.Monad ab7f07f5b1a38960f1f314c9b4df6b9c
import  -/  hspec-expectations-0.8.2:Test.Hspec.Expectations 8bc0d926d5b42398a254e04604809fe4
import  -/  rail-fence-cipher-1.0.1.2:RailFenceCipher ea866b3bc565d148becb3bce6e4eae33
a18e4bb2f0674ee24612719199a84dab
  $tc'Case :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8197111133229858407##
                   13847006553897280588##
                   Main.$trModule
                   Main.$tc'Case2
                   0#
                   Main.$tc'Case1) -}
8f010006a57838aae2252530b9cbf5fc
  $tc'Case1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b4f883606fd905089344438718b2c630
  $tc'Case2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Case3) -}
b70b9a2f50a01b383c0fc203a93b45f6
  $tc'Case3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Case"#) -}
fb54e6971b8cdb3d6eb813b73e5967b8
  $tcCase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   990021888930651814##
                   4262142848388084561##
                   Main.$trModule
                   Main.$tcCase1
                   0#
                   GHC.Types.krep$*) -}
d6f1567c5e9fb74d00e1be64470ce3d3
  $tcCase1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcCase2) -}
7179be3aa9b5f07778c569f16b1ed2bf
  $tcCase2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Case"#) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
98a600eb7c86a57c8a8c4990e2ed7a3a
  data Case
    = Case {description :: GHC.Base.String,
            key :: GHC.Types.Int,
            text :: GHC.Base.String,
            expected :: GHC.Base.String}
98a600eb7c86a57c8a8c4990e2ed7a3a
  description :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 ds4 -> ds1 }) -}
98a600eb7c86a57c8a8c4990e2ed7a3a
  expected :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 ds4 -> ds4 }) -}
98a600eb7c86a57c8a8c4990e2ed7a3a
  key :: Main.Case -> GHC.Types.Int
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLL),1*U(A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 ds4 -> ds2 }) -}
97173d2bd70dba965d7aa223056e413a
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
2c02435a34ab9c7bf7dbd2c9ad39be09
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.Hspec.Core.Runner.hspec2
                        Main.main115
                        Main.main2
                          `cast`
                        (Trans
                             (Sym (GHC.Types.N:IO[0]
                                       <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R))
                             (Trans
                                  (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                            <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                            <GHC.Types.IO>_R
                                            <()>_N))
                                  (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0] <()>_N) <()>_N)))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds ds2 ->
                 case ds2 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.exitFailure1 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
5db231a07eb6b9f3846deb4f9ecce4c2
  main10 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Strictness: m3,
     Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main11) -}
bb95e5aab2d3457c713f231523e75008
  main100 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ncode with three rails"#) -}
7f0a0af6f5f24782e66a28727cb8ce91
  main101 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main102
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
a1c6fa6fb4790dc1ef386370e177659c
  main102 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Strictness: m3,
     Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main103) -}
7f113c67816e7b7c148e372079fe00ee
  main103 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Strictness: m,
     Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Main.main109
                   Main.main81
                   GHC.Types.False
                   Main.main104
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
d5fec472a2691ed3cc8e51eccf621258
  main104 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R <(Test.Hspec.Core.Example.Arg
                                  Test.Hspec.Expectations.Expectation
                                -> GHC.Types.IO ())
                               -> GHC.Types.IO ()>_R
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Main.main105 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
e812bf253e20492dfdfc033f7f246497
  main105 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Test.HUnit.Lang.assertEqual1
                   @ GHC.Base.String
                   Main.main76
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main107
                   (GHC.CString.unpackCString# Main.main106)
                   eta2) -}
58c42c8d15bebd75de4b70c141037cbd
  main106 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("XOXOXOXOXOXOXOXOXO"#) -}
3cbd4a5a074fb8d24c211c9877c6bb9a
  main107 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main108) -}
51d2997e181610e817d50631f4859d1e
  main108 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("XXXXXXXXXOOOOOOOOO"#) -}
41fa7e4dc2656942bd7eeb4515e33418
  main109 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main89
                   Main.main110) -}
1851b513e32954d317d4d0964a7c5e52
  main11 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Strictness: m,
     Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Main.main38
                   Main.main29
                   GHC.Types.False
                   Main.main12
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
cb169b34da06953d72d55e16cc6e34e0
  main110 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main111) -}
6ad65d71a1ed1ad04a861eedaf95d865
  main111 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ncode with two rails"#) -}
db43488eccbe64b275b709e1b762f42b
  main112 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main89
                   Main.main113) -}
033310f36b92765a6de1bf838e5c1497
  main113 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main114) -}
37ff3aff8ce922e0a837cc2d0319a974
  main114 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ncode"#) -}
57f1d67d58159c454ccd87c78de1cf83
  main115 :: Test.Hspec.Core.Options.Config
  {- Unfolding: (Test.Hspec.Core.Options.Config
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.True
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Test.Hspec.Core.Example.defaultParams1
                   Test.Hspec.Core.Options.ColorAuto
                   GHC.Types.True
                   (GHC.Base.Nothing @ Test.Hspec.Core.Formatters.Monad.Formatter)
                   GHC.Types.False
                   Test.Hspec.Core.Options.defaultConfig1
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
02992cd419a7e5a052835bbf3e35a70b
  main116 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
3ffe75c299884eced0dd891c66389813
  main12 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R <(Test.Hspec.Core.Example.Arg
                                  Test.Hspec.Expectations.Expectation
                                -> GHC.Types.IO ())
                               -> GHC.Types.IO ()>_R
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Main.main13 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
a35ace1dd318cd20d2d4b580995b2224
  main13 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Test.HUnit.Lang.assertEqual1
                   @ GHC.Base.String
                   Main.main16
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main14
                   RailFenceCipher.decode1
                   eta2) -}
1c53f02d61cdd28208600ad30eb6f64f
  main14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main15) -}
6503ff0ff3a8e85b0abaef046469fa79
  main15 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("112358132134558914423337761098715972584418167651094617711286"#) -}
fa438eb4d69827b07f4018d27f8b489c
  main16 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?6
                   Test.HUnit.Base.@?=2
                   Main.main17) -}
3fe3675e5005c2cdf6dd579ca17eec52
  main17 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe10
                   Test.Hspec.Expectations.shouldBe2
                   Main.main18) -}
b96281431119a295ec17c1ded51d0d02
  main18 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main27
                   Main.main19
                   GHC.Stack.Types.EmptyCallStack) -}
d2fd600de55ee6b55105a73487a4b23d
  main19 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main26
                   Main.main25
                   Main.main23
                   Main.main22
                   Main.main21
                   Main.main22
                   Main.main20) -}
fd7a2501949fb9f32f59628fc550463f
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, Main.main3 #)) -}
8965ef899b40622adeff11f0273a8e3c
  main20 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 74#) -}
2add3006b22ab10004abfe5a3ffefb4f
  main21 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 39#) -}
2296d4514b01594d10aeae66a8276939
  main22 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 18#) -}
394d31e39a8578845cd822a90152347e
  main23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main24) -}
fab7aac9012911b0f3c371e783c50820
  main24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test/Tests.hs"#) -}
5b3bbd53847032d6048f360eb516d4be
  main25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule2) -}
3ad5730c9523e3dde79d5d984b39dde8
  main26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule4) -}
94639f7c9fc2168e72a5caa7b50263a5
  main27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main28) -}
57a9c25cd17d6adac53b81c77565754f
  main28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("shouldBe"#) -}
772550ea249501ffc8cb8a1324c29da3
  main29 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (Test.Hspec.Core.Tree.specItem13 Main.main30) -}
fb1f1c5bceaca6b2fab9f9753b0f6e71
  main3 :: ((), [Test.Hspec.Core.Tree.SpecTree ()])
  {- Strictness: m, Unfolding: ((GHC.Tuple.(), Main.main4)) -}
e1b7611b34cc58fa71659e7a57913282
  main30 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem11
                   Test.Hspec.Core.Tree.specItem3
                   Main.main31) -}
24146b1e842fd3c56cebbcf83c0b8cb4
  main31 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it1
                   Main.main32) -}
d739b36e334815e9a01740893d4c7176
  main32 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main36
                   Main.main33
                   GHC.Stack.Types.EmptyCallStack) -}
520f44d1a5f55ce0ef7f646c234e4e0c
  main33 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main26
                   Main.main25
                   Main.main23
                   Main.main22
                   Main.main35
                   Main.main22
                   Main.main34) -}
42b0b79b72f2e87d6384d87aba0a33a5
  main34 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 36#) -}
c3d0bd29c195667102d546c7de84e5cb
  main35 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 22#) -}
34e365ac8f0e62851f98eecf5e3e9c14
  main36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main37) -}
b515bef57469715ff1d367e17336134f
  main37 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("it"#) -}
92679b21d91cd6c3b4c99c6f4e17d9e7
  main38 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main41
                   Main.main39) -}
ebd230e4ddf82c0533774dd572fa7e26
  main39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main40) -}
182707317026c833f653f6e723e4102d
  main4 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main65
                   Main.main5) -}
6760d3c091583f5936d9adf140291a53
  main40 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ecode with six rails"#) -}
8a6024d2747d75635659a08b1c20dc44
  main41 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'd'#) -}
591265d21229840aa02d622458c3d4ba
  main42 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main43
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
5f2ddc3f037989f91617613e955a448d
  main43 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Strictness: m3,
     Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main44) -}
afc79246eb799805af0552e5cb352d6e
  main44 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Strictness: m,
     Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Main.main49
                   Main.main29
                   GHC.Types.False
                   Main.main45
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
47decdddf0940ce2133a861878ef8dbf
  main45 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R <(Test.Hspec.Core.Example.Arg
                                  Test.Hspec.Expectations.Expectation
                                -> GHC.Types.IO ())
                               -> GHC.Types.IO ()>_R
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Main.main46 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
ffe67bc18caf5ea5dcac5042c5e47097
  main46 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Test.HUnit.Lang.assertEqual1
                   @ GHC.Base.String
                   Main.main16
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main47
                   RailFenceCipher.decode1
                   eta2) -}
e2c4510bb8bf5289cf828abc8d6fc688
  main47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main48) -}
598ba9800e5528dcf0428217ad9e271c
  main48 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EXERCISMISAWESOME"#) -}
ad0f636f59a6fbf95cbbd5d92172c6ab
  main49 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main41
                   Main.main50) -}
13a9f5ac6959faa32738d88289837e6a
  main5 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main6
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.Tree
                           (Test.Hspec.Core.Example.ActionWith ())
                           (Test.Hspec.Core.Tree.Item ())))) -}
7bfe106ce7454a656cf1abd2e5826737
  main50 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main51) -}
c6b3f76b4745d9a2daa0470fe9cecb2c
  main51 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ecode with five rails"#) -}
cf53e52e28f4a84a07ef4c9477490d11
  main52 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main53
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
b37d72bc1e4ebfba827b6ba9a832789d
  main53 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Strictness: m3,
     Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main54) -}
f1ce25b7efb5539aa18cdf9c3a54c361
  main54 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Strictness: m,
     Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Main.main59
                   Main.main29
                   GHC.Types.False
                   Main.main55
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
dc3947b561726d24660fe10fae3dda78
  main55 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R <(Test.Hspec.Core.Example.Arg
                                  Test.Hspec.Expectations.Expectation
                                -> GHC.Types.IO ())
                               -> GHC.Types.IO ()>_R
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Main.main56 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
f576e000077ffd250bc561b878aa0cae
  main56 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Test.HUnit.Lang.assertEqual1
                   @ GHC.Base.String
                   Main.main16
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main57
                   RailFenceCipher.decode1
                   eta2) -}
fdf1cd745bbc4212eb34a024b87ed852
  main57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main58) -}
83c3f6710393a17485fedaeb1f03f1ba
  main58 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("THEDEVILISINTHEDETAILS"#) -}
9101ca55c5c994f0580c0c52f3c17cd4
  main59 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main41
                   Main.main60) -}
1a190b5c15a29b043dae0ad70947d98d
  main6 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Strictness: m1,
     Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Main.main62
                   Main.main7) -}
4d83102d66fe93f076235149034982b7
  main60 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main61) -}
7ecf4553d5956d395fc9d1a5017c23a6
  main61 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ecode with three rails"#) -}
8d1caeeca286880e560851d58a6c543e
  main62 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main41
                   Main.main63) -}
49e76a83f4a11fb3692d1fe507dd127c
  main63 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main64) -}
cc41a1e0d3a791d2145af728075a9022
  main64 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ecode"#) -}
cafea7872255ee6bc26a69c300aec29f
  main65 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Strictness: m1,
     Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Main.main112
                   Main.main66) -}
924adcf74bc03020103accc8b29270d7
  main66 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main101
                     `cast`
                   (Nth:1
                        (Nth:3
                             (Nth:3
                                  (Trans
                                       (Sym (GHC.Types.N:IO[0]
                                                 <((),
                                                   [Test.Hspec.Core.Tree.SpecTree
                                                      (Test.Hspec.Core.Example.Arg
                                                         Test.Hspec.Expectations.Expectation)])>_R))
                                       (Trans
                                            (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree
                                                          (Test.Hspec.Core.Example.Arg
                                                             Test.Hspec.Expectations.Expectation)]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                                            (Trans
                                                 (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                           (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0]))) <()>_N)
                                                 (Trans
                                                      (Nth:2
                                                           (Trans
                                                                (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                     <()>_N <()>_N
                                                                 ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N <()>_N
                                                                 ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N <()>_N)
                                                                (<Control.Monad.Trans.Writer.Lazy.WriterT
                                                                    [Test.Hspec.Core.Tree.SpecTree
                                                                       ()]
                                                                    GHC.Types.IO
                                                                    ()>_R
                                                                 ->_R <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                         [Test.Hspec.Core.Tree.SpecTree
                                                                            ()]
                                                                         GHC.Types.IO
                                                                         ()>_R
                                                                 ->_R Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                          <[Test.Hspec.Core.Tree.SpecTree
                                                                              ()]>_N
                                                                          <GHC.Types.IO>_R
                                                                          <()>_N)))
                                                      (Trans
                                                           (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                <[Test.Hspec.Core.Tree.SpecTree
                                                                    ()]>_N
                                                                <GHC.Types.IO>_R
                                                                <()>_N)
                                                           (GHC.Types.N:IO[0]
                                                                <((),
                                                                  [Test.Hspec.Core.Tree.SpecTree
                                                                     ()])>_R)))))))))
                   Main.main67) -}
75392bdfd108e74f735f6b095fb8a133
  main67 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main90
                     `cast`
                   (Nth:1
                        (Nth:3
                             (Nth:3
                                  (Trans
                                       (Sym (GHC.Types.N:IO[0]
                                                 <((),
                                                   [Test.Hspec.Core.Tree.SpecTree
                                                      (Test.Hspec.Core.Example.Arg
                                                         Test.Hspec.Expectations.Expectation)])>_R))
                                       (Trans
                                            (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree
                                                          (Test.Hspec.Core.Example.Arg
                                                             Test.Hspec.Expectations.Expectation)]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                                            (Trans
                                                 (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                           (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0]))) <()>_N)
                                                 (Trans
                                                      (Nth:2
                                                           (Trans
                                                                (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                     <()>_N <()>_N
                                                                 ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N <()>_N
                                                                 ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N <()>_N)
                                                                (<Control.Monad.Trans.Writer.Lazy.WriterT
                                                                    [Test.Hspec.Core.Tree.SpecTree
                                                                       ()]
                                                                    GHC.Types.IO
                                                                    ()>_R
                                                                 ->_R <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                         [Test.Hspec.Core.Tree.SpecTree
                                                                            ()]
                                                                         GHC.Types.IO
                                                                         ()>_R
                                                                 ->_R Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                          <[Test.Hspec.Core.Tree.SpecTree
                                                                              ()]>_N
                                                                          <GHC.Types.IO>_R
                                                                          <()>_N)))
                                                      (Trans
                                                           (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                <[Test.Hspec.Core.Tree.SpecTree
                                                                    ()]>_N
                                                                <GHC.Types.IO>_R
                                                                <()>_N)
                                                           (GHC.Types.N:IO[0]
                                                                <((),
                                                                  [Test.Hspec.Core.Tree.SpecTree
                                                                     ()])>_R)))))))))
                   Main.main68
                     `cast`
                   (Nth:1
                        (Nth:3
                             (Nth:3
                                  (Trans
                                       (Sym (GHC.Types.N:IO[0]
                                                 <((),
                                                   [Test.Hspec.Core.Tree.SpecTree
                                                      (Test.Hspec.Core.Example.Arg
                                                         Test.Hspec.Expectations.Expectation)])>_R))
                                       (Trans
                                            (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree
                                                          (Test.Hspec.Core.Example.Arg
                                                             Test.Hspec.Expectations.Expectation)]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                                            (Trans
                                                 (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                           (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0]))) <()>_N)
                                                 (Trans
                                                      (Nth:2
                                                           (Trans
                                                                (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                     <()>_N <()>_N
                                                                 ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N <()>_N
                                                                 ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N <()>_N)
                                                                (<Control.Monad.Trans.Writer.Lazy.WriterT
                                                                    [Test.Hspec.Core.Tree.SpecTree
                                                                       ()]
                                                                    GHC.Types.IO
                                                                    ()>_R
                                                                 ->_R <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                         [Test.Hspec.Core.Tree.SpecTree
                                                                            ()]
                                                                         GHC.Types.IO
                                                                         ()>_R
                                                                 ->_R Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                          <[Test.Hspec.Core.Tree.SpecTree
                                                                              ()]>_N
                                                                          <GHC.Types.IO>_R
                                                                          <()>_N)))
                                                      (Trans
                                                           (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                <[Test.Hspec.Core.Tree.SpecTree
                                                                    ()]>_N
                                                                <GHC.Types.IO>_R
                                                                <()>_N)
                                                           (GHC.Types.N:IO[0]
                                                                <((),
                                                                  [Test.Hspec.Core.Tree.SpecTree
                                                                     ()])>_R)))))))))) -}
5aea143ff8e259c2ab487d691eb95500
  main68 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main69
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
1e0eedc33d27d4bc9960eff325aba956
  main69 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Strictness: m3,
     Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main70) -}
2dd3e2ddd2b9daf2326ba4bdef55cae5
  main7 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main52
                     `cast`
                   (Nth:1
                        (Nth:3
                             (Nth:3
                                  (Trans
                                       (Sym (GHC.Types.N:IO[0]
                                                 <((),
                                                   [Test.Hspec.Core.Tree.SpecTree
                                                      (Test.Hspec.Core.Example.Arg
                                                         Test.Hspec.Expectations.Expectation)])>_R))
                                       (Trans
                                            (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree
                                                          (Test.Hspec.Core.Example.Arg
                                                             Test.Hspec.Expectations.Expectation)]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                                            (Trans
                                                 (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                           (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0]))) <()>_N)
                                                 (Trans
                                                      (Nth:2
                                                           (Trans
                                                                (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                     <()>_N <()>_N
                                                                 ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N <()>_N
                                                                 ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N <()>_N)
                                                                (<Control.Monad.Trans.Writer.Lazy.WriterT
                                                                    [Test.Hspec.Core.Tree.SpecTree
                                                                       ()]
                                                                    GHC.Types.IO
                                                                    ()>_R
                                                                 ->_R <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                         [Test.Hspec.Core.Tree.SpecTree
                                                                            ()]
                                                                         GHC.Types.IO
                                                                         ()>_R
                                                                 ->_R Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                          <[Test.Hspec.Core.Tree.SpecTree
                                                                              ()]>_N
                                                                          <GHC.Types.IO>_R
                                                                          <()>_N)))
                                                      (Trans
                                                           (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                <[Test.Hspec.Core.Tree.SpecTree
                                                                    ()]>_N
                                                                <GHC.Types.IO>_R
                                                                <()>_N)
                                                           (GHC.Types.N:IO[0]
                                                                <((),
                                                                  [Test.Hspec.Core.Tree.SpecTree
                                                                     ()])>_R)))))))))
                   Main.main8) -}
b828ec353ae1018de56e63a9bae9309d
  main70 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Strictness: m,
     Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Main.main86
                   Main.main81
                   GHC.Types.False
                   Main.main71
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
a6377c5199986f5c893bed8532266a5c
  main71 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R <(Test.Hspec.Core.Example.Arg
                                  Test.Hspec.Expectations.Expectation
                                -> GHC.Types.IO ())
                               -> GHC.Types.IO ()>_R
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Main.main72 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
3b92f76f6faa270badc08f98d9b76e5b
  main72 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Test.HUnit.Lang.assertEqual1
                   @ GHC.Base.String
                   Main.main76
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main74
                   (GHC.CString.unpackCString# Main.main73)
                   eta2) -}
e753ce8364c9ef95765f8f74b323458c
  main73 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EXERCISES"#) -}
af87a06b64a38f5ddc70e9af0c47aa24
  main74 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main75) -}
d889d2bf45788d507dee478469433422
  main75 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ESXIEECSR"#) -}
bea76b7a7e410006342558409a90c2bc
  main76 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?6
                   Test.HUnit.Base.@?=2
                   Main.main77) -}
271508dee179d8b9d578ca365b9a137e
  main77 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe10
                   Test.Hspec.Expectations.shouldBe2
                   Main.main78) -}
e74ce7cdf94f27408ee80102b57cdc75
  main78 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main27
                   Main.main79
                   GHC.Stack.Types.EmptyCallStack) -}
d30ecb1f7e00b7a742aa307751bc4b9c
  main79 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main26
                   Main.main25
                   Main.main23
                   Main.main80
                   Main.main21
                   Main.main80
                   Main.main20) -}
a2b6a1f6ea4104f3dec3b2edef1ddbd5
  main8 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main42
                     `cast`
                   (Nth:1
                        (Nth:3
                             (Nth:3
                                  (Trans
                                       (Sym (GHC.Types.N:IO[0]
                                                 <((),
                                                   [Test.Hspec.Core.Tree.SpecTree
                                                      (Test.Hspec.Core.Example.Arg
                                                         Test.Hspec.Expectations.Expectation)])>_R))
                                       (Trans
                                            (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree
                                                          (Test.Hspec.Core.Example.Arg
                                                             Test.Hspec.Expectations.Expectation)]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                                            (Trans
                                                 (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                           (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0]))) <()>_N)
                                                 (Trans
                                                      (Nth:2
                                                           (Trans
                                                                (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                     <()>_N <()>_N
                                                                 ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N <()>_N
                                                                 ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N <()>_N)
                                                                (<Control.Monad.Trans.Writer.Lazy.WriterT
                                                                    [Test.Hspec.Core.Tree.SpecTree
                                                                       ()]
                                                                    GHC.Types.IO
                                                                    ()>_R
                                                                 ->_R <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                         [Test.Hspec.Core.Tree.SpecTree
                                                                            ()]
                                                                         GHC.Types.IO
                                                                         ()>_R
                                                                 ->_R Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                          <[Test.Hspec.Core.Tree.SpecTree
                                                                              ()]>_N
                                                                          <GHC.Types.IO>_R
                                                                          <()>_N)))
                                                      (Trans
                                                           (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                <[Test.Hspec.Core.Tree.SpecTree
                                                                    ()]>_N
                                                                <GHC.Types.IO>_R
                                                                <()>_N)
                                                           (GHC.Types.N:IO[0]
                                                                <((),
                                                                  [Test.Hspec.Core.Tree.SpecTree
                                                                     ()])>_R)))))))))
                   Main.main9
                     `cast`
                   (Nth:1
                        (Nth:3
                             (Nth:3
                                  (Trans
                                       (Sym (GHC.Types.N:IO[0]
                                                 <((),
                                                   [Test.Hspec.Core.Tree.SpecTree
                                                      (Test.Hspec.Core.Example.Arg
                                                         Test.Hspec.Expectations.Expectation)])>_R))
                                       (Trans
                                            (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree
                                                          (Test.Hspec.Core.Example.Arg
                                                             Test.Hspec.Expectations.Expectation)]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                                            (Trans
                                                 (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                           (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0]))) <()>_N)
                                                 (Trans
                                                      (Nth:2
                                                           (Trans
                                                                (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                     <()>_N <()>_N
                                                                 ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N <()>_N
                                                                 ->_R Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N <()>_N)
                                                                (<Control.Monad.Trans.Writer.Lazy.WriterT
                                                                    [Test.Hspec.Core.Tree.SpecTree
                                                                       ()]
                                                                    GHC.Types.IO
                                                                    ()>_R
                                                                 ->_R <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                         [Test.Hspec.Core.Tree.SpecTree
                                                                            ()]
                                                                         GHC.Types.IO
                                                                         ()>_R
                                                                 ->_R Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                          <[Test.Hspec.Core.Tree.SpecTree
                                                                              ()]>_N
                                                                          <GHC.Types.IO>_R
                                                                          <()>_N)))
                                                      (Trans
                                                           (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                <[Test.Hspec.Core.Tree.SpecTree
                                                                    ()]>_N
                                                                <GHC.Types.IO>_R
                                                                <()>_N)
                                                           (GHC.Types.N:IO[0]
                                                                <((),
                                                                  [Test.Hspec.Core.Tree.SpecTree
                                                                     ()])>_R)))))))))) -}
136a670d0f90480a1a13bc12cfc691e0
  main80 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 17#) -}
38c26f7dd84a95bd5ee3c4ec3b236de4
  main81 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location
  {- Unfolding: (Test.Hspec.Core.Tree.specItem13 Main.main82) -}
4003231596cc60018d1675515afa1fe0
  main82 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem11
                   Test.Hspec.Core.Tree.specItem3
                   Main.main83) -}
afb6502ea91ef10d6f951e82eecd2e7e
  main83 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it1
                   Main.main84) -}
acd91a638e861e6541177f2e622f6219
  main84 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main36
                   Main.main85
                   GHC.Stack.Types.EmptyCallStack) -}
db01b2b3832fc54ad07aab64e6e2b662
  main85 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main26
                   Main.main25
                   Main.main23
                   Main.main80
                   Main.main35
                   Main.main80
                   Main.main34) -}
39e59b5969afe5d974df57f93bb82c39
  main86 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main89
                   Main.main87) -}
f6cbc5019c8d5bc352793f39f5e59e3a
  main87 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main88) -}
2a2c4793fc0dba7f8a2ee7280fbbe4b2
  main88 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ncode with ending in the middle"#) -}
0baf976bd9a90ef9ec5f55dcc3ad8b00
  main89 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'e'#) -}
dfbe6030cd3c9fd9a749718855624362
  main9 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main10
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
c7b052fbddc2e43d839814ec6e8324a9
  main90 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main91
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
d286d07e2c0c7f65c0b5f9de047eee44
  main91 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
      (Test.Hspec.Core.Tree.Item
         (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
  {- Strictness: m3,
     Unfolding: (Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main92) -}
5656675c272d69f16517cce347fb93d4
  main92 ::
    Test.Hspec.Core.Tree.Item
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Strictness: m,
     Unfolding: (Test.Hspec.Core.Tree.Item
                   @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                   Main.main98
                   Main.main81
                   GHC.Types.False
                   Main.main93
                     `cast`
                   (<Test.Hspec.Core.Example.Params>_R
                    ->_R <Test.Hspec.Core.Example.ActionWith
                            (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                          -> GHC.Types.IO ()>_R
                    ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     GHC.Exception.SomeException
                                     Test.Hspec.Core.Example.Result>_R))) -}
1a9c7c9eea813938ee6aa6d1d99b3e8b
  main93 ::
    Test.Hspec.Core.Example.Params
    -> (Test.Hspec.Core.Example.ActionWith
          (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
        -> GHC.Types.IO ())
    -> Test.Hspec.Core.Example.ProgressCallback
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.Exception.SomeException Test.Hspec.Core.Example.Result #)
  {- Arity: 4,
     Unfolding: (Test.Hspec.Core.Example.safeEvaluateExample1
                   @ Test.Hspec.Expectations.Expectation
                   Test.Hspec.Core.Example.$fExampleIO1
                     `cast`
                   (Trans
                        (<Test.Hspec.Expectations.Expectation>_R
                         ->_R <Test.Hspec.Core.Example.Params>_R
                         ->_R <(Test.Hspec.Core.Example.Arg
                                  Test.Hspec.Expectations.Expectation
                                -> GHC.Types.IO ())
                               -> GHC.Types.IO ()>_R
                         ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                        (Sym (Test.Hspec.Core.Example.N:Example[0]
                                  <Test.Hspec.Expectations.Expectation>_N)))
                   Main.main94 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
3f902303a6e7cb93eca30d85b993cfb5
  main94 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Test.HUnit.Lang.assertEqual1
                   @ GHC.Base.String
                   Main.main76
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main96
                   (GHC.CString.unpackCString# Main.main95)
                   eta2) -}
3ad9ab1936a804e56cc36892d69e3b4c
  main95 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("WEAREDISCOVEREDFLEEATONCE"#) -}
f2ec75f7934a5901b8f36811955bede7
  main96 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main97) -}
d2f15d1091e325c206a14875dfba201d
  main97 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("WECRLTEERDSOEEFEAOCAIVDEN"#) -}
13163a6bdc61ff764a9fdcb1f8fb78e9
  main98 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main89
                   Main.main99) -}
550556414e25865e18d0c6d85bae4adc
  main99 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main100) -}
98a600eb7c86a57c8a8c4990e2ed7a3a
  text :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 ds4 -> ds3 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

