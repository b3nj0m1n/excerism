
==================== FINAL INTERFACE ====================
2018-01-28 23:19:03.404792 UTC

interface pangram-1.4.0.6-1dNOwsdqgbn9AZ11BmUZ4O:Pangram 8022
  interface hash: 5cffebd01a1398b602fd52db52c28bb1
  ABI hash: 4f53ddf115ffb9dc791da2e2936fdc53
  export-list hash: acd623e0ac3ed7ad495e5358947fc202
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0451a77cc0d8e5d99d548d6441c7dd35
  sig of: Nothing
  used TH splices: False
  where
exports:
  Pangram.isPangram
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Data.Char fe4e3458190deeac19969ce15e33bed9
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Unicode 49c9de4fffed0d9be65aaeb6a60b757c
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
b3e6d3b77104297c8d3ed22fe9d27b39
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Pangram.$trModule3
                   Pangram.$trModule1) -}
7e75fbb17f0cd1c24a89929fb10741c0
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Pangram.$trModule2) -}
846db0d66bbac571355019fc0a92d32a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Pangram"#) -}
8dfd7d08eb114b0c980b1e1f08c9b87d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Pangram.$trModule4) -}
506830c51741be81932b85310aefe91a
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("pangram-1.4.0.6-1dNOwsdqgbn9AZ11BmUZ4O"#) -}
c58aa5f0b6def9f25d13401bada46ac3
  isPangram :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (xs :: GHC.Base.String) ->
                 letrec {
                   $wgo :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Types.Bool
                     <join 2> {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0] -}
                   = \ (w :: GHC.Prim.Int#) (ww :: GHC.Prim.Int#) ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.># w 122#) of wild {
                       GHC.Types.False
                       -> let {
                            x :: GHC.Prim.Char# = GHC.Prim.chr# w
                          } in
                          letrec {
                            go :: [GHC.Types.Char] -> GHC.Types.Int -> GHC.Types.Bool
                              <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U(U)> -}
                            = \ (ds :: [GHC.Types.Char]) (eta :: GHC.Types.Int) ->
                              case ds of wild1 {
                                []
                                -> case eta of wild2 { GHC.Types.I# x1 ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.># x1 0#) of wild3 {
                                     GHC.Types.False -> $wgo (GHC.Prim.+# w 1#) ww
                                     GHC.Types.True
                                     -> $wgo (GHC.Prim.+# w 1#) (GHC.Prim.+# ww 1#) } }
                                : y ys
                                -> case y of ww1 { GHC.Types.C# ww2 ->
                                   case {__pkg_ccall base-4.10.1.0 GHC.Prim.Int#
                                                                   -> GHC.Prim.State#
                                                                        GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         GHC.Prim.Int# #)}
                                          (GHC.Prim.ord# ww2)
                                          GHC.Prim.realWorld# of wild2 { (#,#) ds1 ds2 ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.leWord#
                                             (GHC.Prim.int2Word# ds2)
                                             1114111##) of wild3 {
                                     GHC.Types.False
                                     -> case GHC.Char.$wlvl ds2 ret_ty GHC.Types.Bool of {}
                                     GHC.Types.True
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.eqChar# (GHC.Prim.chr# ds2) x) of wild4 {
                                          GHC.Types.False -> go ys eta
                                          GHC.Types.True
                                          -> case eta of a1 { GHC.Types.I# ipv ->
                                             go ys (GHC.Types.I# (GHC.Prim.+# ipv 1#)) } } } } } }
                          } in
                          go xs Pangram.isPangram1
                       GHC.Types.True
                       -> case ww of ww1 {
                            DEFAULT -> GHC.Types.False 26# -> GHC.Types.True } }
                 } in
                 $wgo 97# 0#) -}
416fdc6ccc2c94d097643e2a86e5f1e0
  isPangram1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

